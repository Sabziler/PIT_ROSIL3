
rosiltest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005e2  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001451  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ada  00000000  00000000  00001c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d92  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000705  00000000  00000000  0000408e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__vector_1>
   6:	00 00       	nop
   8:	dc c0       	rjmp	.+440    	; 0x1c2 <__vector_2>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__vector_3>
   e:	00 00       	nop
  10:	0c c1       	rjmp	.+536    	; 0x22a <__vector_4>
  12:	00 00       	nop
  14:	21 c1       	rjmp	.+578    	; 0x258 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	6d c0       	rjmp	.+218    	; 0x124 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0c d1       	rcall	.+536    	; 0x2dc <main>
  c4:	8c c2       	rjmp	.+1304   	; 0x5de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_10>:
volatile int g_flag = 0;
volatile bool saram = true;
volatile unsigned short g_Time = 0;
volatile unsigned int distance = 0;

ISR(TIMER2_OVF_vect	){		// 약 16ms마다 인터럽트가 걸린다. 
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	ULTRA_SONIC_TRIG();
  ee:	fc d1       	rcall	.+1016   	; 0x4e8 <_Z16ULTRA_SONIC_TRIGv>
	TransNumUart0(GetADC(5));
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	58 d1       	rcall	.+688    	; 0x3a4 <_Z6GetADCc>
  f4:	72 d1       	rcall	.+740    	; 0x3da <_Z13TransNumUart0i>
	TransUart0('\n');
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	68 d1       	rcall	.+720    	; 0x3ca <_Z10TransUart0h>
	TransUart0('\r');
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	66 d1       	rcall	.+716    	; 0x3ca <_Z10TransUart0h>
  fe:	ff 91       	pop	r31
}
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0b be       	out	0x3b, r0	; 59
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_18>:
 124:	1f 92       	push	r1

ISR(USART0_RX_vect){
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	if(RecvUart0() == '1')
 14a:	43 d1       	rcall	.+646    	; 0x3d2 <_Z9RecvUart0v>
 14c:	81 33       	cpi	r24, 0x31	; 49
 14e:	21 f4       	brne	.+8      	; 0x158 <__vector_18+0x34>
		saram = true;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_18+0x38>
	else
		saram = false;
 158:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0b be       	out	0x3b, r0	; 59
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_1>:

ISR(INT0_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0b b6       	in	r0, 0x3b	; 59
 18e:	0f 92       	push	r0
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	sbi(PORTF,7);
 198:	e2 e6       	ldi	r30, 0x62	; 98
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	80 83       	st	Z, r24
	OCR1A += 50;
 1a2:	8a b5       	in	r24, 0x2a	; 42
 1a4:	9b b5       	in	r25, 0x2b	; 43
 1a6:	c2 96       	adiw	r24, 0x32	; 50
 1a8:	9b bd       	out	0x2b, r25	; 43
 1aa:	8a bd       	out	0x2a, r24	; 42
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0b be       	out	0x3b, r0	; 59
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_2>:
ISR(INT1_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	8f 93       	push	r24
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	cbi(PORTF, 7);
 1d6:	e2 e6       	ldi	r30, 0x62	; 98
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	80 83       	st	Z, r24
	PORTA = NUM1;
 1e0:	89 ef       	ldi	r24, 0xF9	; 249
 1e2:	8b bb       	out	0x1b, r24	; 27
	sbi(PORTE, 2);					//up
 1e4:	1a 9a       	sbi	0x03, 2	; 3
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:
ISR(INT2_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	cbi(PORTB, 2);
 208:	c2 98       	cbi	0x18, 2	; 24
	PORTA = NUM2;
 20a:	84 ea       	ldi	r24, 0xA4	; 164
 20c:	8b bb       	out	0x1b, r24	; 27
	cbi(PORTE, 2);					//down
 20e:	1a 98       	cbi	0x03, 2	; 3
	OCR1C = OPEN;
 210:	82 e2       	ldi	r24, 0x22	; 34
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 218:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
}
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_4>:
ISR(INT3_vect){
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	cbi(PORTB, 3);
 238:	c3 98       	cbi	0x18, 3	; 24
	OCR1C = CLOSE;
 23a:	80 e5       	ldi	r24, 0x50	; 80
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 242:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	PORTA = NUM3;
 246:	80 eb       	ldi	r24, 0xB0	; 176
 248:	8b bb       	out	0x1b, r24	; 27
}
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_5>:

ISR(INT4_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
	 if((EICRB&0b00000011) == 0b00000010)//라이징일때
 272:	8a b7       	in	r24, 0x3a	; 58
 274:	83 70       	andi	r24, 0x03	; 3
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	f1 f4       	brne	.+60     	; 0x2b6 <__vector_5+0x5e>
	 {
		 g_Time = TCNT3;
 27a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 27e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 282:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_Time+0x1>
 286:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_Time>
		 distance = g_Time/116;
 28a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <g_Time>
 28e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <g_Time+0x1>
 292:	af e9       	ldi	r26, 0x9F	; 159
 294:	b6 e4       	ldi	r27, 0x46	; 70
 296:	5e d1       	rcall	.+700    	; 0x554 <__umulhisi3>
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	92 95       	swap	r25
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 27       	eor	r24, r25
 2a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		 EICRB = 0b00000011;//라이징으로 바꿈
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	8a bf       	out	0x3a, r24	; 58
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <__vector_5+0x6a>
	 }

	 else//폴링일때
	 {
		 TCNT3=0;
 2b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ba:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		 EICRB = 0b00000010;//폴링으로 바꿈
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	8a bf       	out	0x3a, r24	; 58
	 }
}
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:



int main(void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	2f 97       	sbiw	r28, 0x0f	; 15
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	unsigned char str1[] = "Smart-Elevator";
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	de 01       	movw	r26, r28
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x1e>
	InitIO();
 302:	17 d0       	rcall	.+46     	; 0x332 <_Z6InitIOv>
	InitExtInt();
 304:	1f d0       	rcall	.+62     	; 0x344 <_Z10InitExtIntv>
	InitUart0();	
 306:	56 d0       	rcall	.+172    	; 0x3b4 <_Z9InitUart0v>
	Init_CLCD();
 308:	c5 d0       	rcall	.+394    	; 0x494 <_Z9Init_CLCDv>
	InitTimer1();
 30a:	25 d0       	rcall	.+74     	; 0x356 <_Z10InitTimer1v>
 30c:	37 d0       	rcall	.+110    	; 0x37c <_Z10InitTimer2v>
	InitTimer2();
 30e:	3b d0       	rcall	.+118    	; 0x386 <_Z10InitTimer3v>
 310:	41 d0       	rcall	.+130    	; 0x394 <_Z7InitADCv>
	InitTimer3();
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	89 e6       	ldi	r24, 0x69	; 105
	InitADC();
 316:	98 e1       	ldi	r25, 0x18	; 24
 318:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x3c>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x46>
 322:	00 00       	nop
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
	_delay_ms(500);
	CLCD_String_Data(str1);
 328:	d1 d0       	rcall	.+418    	; 0x4cc <_Z16CLCD_String_DataPh>
 32a:	80 ec       	ldi	r24, 0xC0	; 192
 32c:	9d d0       	rcall	.+314    	; 0x468 <_Z12CLCD_Commandh>
 32e:	78 94       	sei
	CLCD_Command(0xc0); // 커서를2번째줄첫번째칸으로이동
 330:	ff cf       	rjmp	.-2      	; 0x330 <main+0x54>

00000332 <_Z6InitIOv>:
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8a bb       	out	0x1a, r24	; 26
	sei();
 336:	87 bb       	out	0x17, r24	; 23
 338:	9e e2       	ldi	r25, 0x2E	; 46
		str++;
	}
 }

void CLCD_Position(unsigned char col, unsigned char row){
	CLCD_Command(0x80 | (col + row * 0x40));
 33a:	92 b9       	out	0x02, r25	; 2
 33c:	88 bb       	out	0x18, r24	; 24
 33e:	8b bb       	out	0x1b, r24	; 27
 340:	1d 98       	cbi	0x03, 5	; 3
 342:	08 95       	ret

00000344 <_Z10InitExtIntv>:
 344:	11 ba       	out	0x11, r1	; 17
 346:	8a ea       	ldi	r24, 0xAA	; 170
 348:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	8a bf       	out	0x3a, r24	; 58
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	89 bf       	out	0x39, r24	; 57
 354:	08 95       	ret

00000356 <_Z10InitTimer1v>:
 356:	8a ea       	ldi	r24, 0xAA	; 170
 358:	8f bd       	out	0x2f, r24	; 47
 35a:	8c e1       	ldi	r24, 0x1C	; 28
 35c:	8e bd       	out	0x2e, r24	; 46
 35e:	82 ee       	ldi	r24, 0xE2	; 226
 360:	94 e0       	ldi	r25, 0x04	; 4
 362:	97 bd       	out	0x27, r25	; 39
 364:	86 bd       	out	0x26, r24	; 38
 366:	1b bc       	out	0x2b, r1	; 43
 368:	1a bc       	out	0x2a, r1	; 42
 36a:	99 bd       	out	0x29, r25	; 41
 36c:	88 bd       	out	0x28, r24	; 40
 36e:	80 e5       	ldi	r24, 0x50	; 80
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 376:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 37a:	08 95       	ret

0000037c <_Z10InitTimer2v>:
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	85 bd       	out	0x25, r24	; 37
 380:	80 e4       	ldi	r24, 0x40	; 64
 382:	87 bf       	out	0x37, r24	; 55
 384:	08 95       	ret

00000386 <_Z10InitTimer3v>:
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 392:	08 95       	ret

00000394 <_Z7InitADCv>:
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 39a:	80 e4       	ldi	r24, 0x40	; 64
 39c:	87 b9       	out	0x07, r24	; 7
 39e:	87 e8       	ldi	r24, 0x87	; 135
 3a0:	86 b9       	out	0x06, r24	; 6
 3a2:	08 95       	ret

000003a4 <_Z6GetADCc>:
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	87 b9       	out	0x07, r24	; 7
 3a8:	36 9a       	sbi	0x06, 6	; 6
 3aa:	34 9b       	sbis	0x06, 4	; 6
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <_Z6GetADCc+0x6>
 3ae:	84 b1       	in	r24, 0x04	; 4
 3b0:	95 b1       	in	r25, 0x05	; 5
 3b2:	08 95       	ret

000003b4 <_Z9InitUart0v>:
 3b4:	8e e2       	ldi	r24, 0x2E	; 46
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	1b b8       	out	0x0b, r1	; 11
 3ba:	88 e9       	ldi	r24, 0x98	; 152
 3bc:	8a b9       	out	0x0a, r24	; 10
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	89 b9       	out	0x09, r24	; 9
 3c8:	08 95       	ret

000003ca <_Z10TransUart0h>:
 3ca:	5d 9b       	sbis	0x0b, 5	; 11
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <_Z10TransUart0h>
 3ce:	8c b9       	out	0x0c, r24	; 12
 3d0:	08 95       	ret

000003d2 <_Z9RecvUart0v>:
 3d2:	5f 9b       	sbis	0x0b, 7	; 11
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <_Z9RecvUart0v>
 3d6:	8c b1       	in	r24, 0x0c	; 12
 3d8:	08 95       	ret

000003da <_Z13TransNumUart0i>:
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
 3e4:	99 23       	and	r25, r25
 3e6:	2c f4       	brge	.+10     	; 0x3f2 <_Z13TransNumUart0i+0x18>
 3e8:	8d e2       	ldi	r24, 0x2D	; 45
 3ea:	ef df       	rcall	.-34     	; 0x3ca <_Z10TransUart0h>
 3ec:	d1 95       	neg	r29
 3ee:	c1 95       	neg	r28
 3f0:	d1 09       	sbc	r29, r1
 3f2:	be 01       	movw	r22, r28
 3f4:	0d 2e       	mov	r0, r29
 3f6:	00 0c       	add	r0, r0
 3f8:	88 0b       	sbc	r24, r24
 3fa:	99 0b       	sbc	r25, r25
 3fc:	20 ea       	ldi	r18, 0xA0	; 160
 3fe:	36 e8       	ldi	r19, 0x86	; 134
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	8b d0       	rcall	.+278    	; 0x51c <__divmodsi4>
 406:	20 e1       	ldi	r18, 0x10	; 16
 408:	37 e2       	ldi	r19, 0x27	; 39
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	86 d0       	rcall	.+268    	; 0x51c <__divmodsi4>
 410:	80 e3       	ldi	r24, 0x30	; 48
 412:	82 0f       	add	r24, r18
 414:	da df       	rcall	.-76     	; 0x3ca <_Z10TransUart0h>
 416:	ce 01       	movw	r24, r28
 418:	60 e1       	ldi	r22, 0x10	; 16
 41a:	77 e2       	ldi	r23, 0x27	; 39
 41c:	6c d0       	rcall	.+216    	; 0x4f6 <__divmodhi4>
 41e:	08 ee       	ldi	r16, 0xE8	; 232
 420:	13 e0       	ldi	r17, 0x03	; 3
 422:	b8 01       	movw	r22, r16
 424:	68 d0       	rcall	.+208    	; 0x4f6 <__divmodhi4>
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	86 0f       	add	r24, r22
 42a:	cf df       	rcall	.-98     	; 0x3ca <_Z10TransUart0h>
 42c:	ce 01       	movw	r24, r28
 42e:	b8 01       	movw	r22, r16
 430:	62 d0       	rcall	.+196    	; 0x4f6 <__divmodhi4>
 432:	04 e6       	ldi	r16, 0x64	; 100
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	b8 01       	movw	r22, r16
 438:	5e d0       	rcall	.+188    	; 0x4f6 <__divmodhi4>
 43a:	80 e3       	ldi	r24, 0x30	; 48
 43c:	86 0f       	add	r24, r22
 43e:	c5 df       	rcall	.-118    	; 0x3ca <_Z10TransUart0h>
 440:	ce 01       	movw	r24, r28
 442:	b8 01       	movw	r22, r16
 444:	58 d0       	rcall	.+176    	; 0x4f6 <__divmodhi4>
 446:	0a e0       	ldi	r16, 0x0A	; 10
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	b8 01       	movw	r22, r16
 44c:	54 d0       	rcall	.+168    	; 0x4f6 <__divmodhi4>
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	86 0f       	add	r24, r22
 452:	bb df       	rcall	.-138    	; 0x3ca <_Z10TransUart0h>
 454:	ce 01       	movw	r24, r28
 456:	b8 01       	movw	r22, r16
 458:	4e d0       	rcall	.+156    	; 0x4f6 <__divmodhi4>
 45a:	80 5d       	subi	r24, 0xD0	; 208
 45c:	b6 df       	rcall	.-148    	; 0x3ca <_Z10TransUart0h>
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <_Z12CLCD_Commandh>:
 468:	e5 e6       	ldi	r30, 0x65	; 101
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	90 83       	st	Z, r25
 470:	85 bb       	out	0x15, r24	; 21
 472:	90 81       	ld	r25, Z
 474:	9b 7f       	andi	r25, 0xFB	; 251
 476:	90 83       	st	Z, r25
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	39 f4       	brne	.+14     	; 0x48a <_Z12CLCD_Commandh+0x22>
 47c:	8f e3       	ldi	r24, 0x3F	; 63
 47e:	9f e1       	ldi	r25, 0x1F	; 31
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <_Z12CLCD_Commandh+0x18>
 484:	00 c0       	rjmp	.+0      	; 0x486 <_Z12CLCD_Commandh+0x1e>
 486:	00 00       	nop
 488:	08 95       	ret
 48a:	95 ed       	ldi	r25, 0xD5	; 213
 48c:	9a 95       	dec	r25
 48e:	f1 f7       	brne	.-4      	; 0x48c <_Z12CLCD_Commandh+0x24>
 490:	00 00       	nop
 492:	08 95       	ret

00000494 <_Z9Init_CLCDv>:
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	84 bb       	out	0x14, r24	; 20
 498:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 49c:	88 e3       	ldi	r24, 0x38	; 56
 49e:	e4 df       	rcall	.-56     	; 0x468 <_Z12CLCD_Commandh>
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	e2 df       	rcall	.-60     	; 0x468 <_Z12CLCD_Commandh>
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	e0 df       	rcall	.-64     	; 0x468 <_Z12CLCD_Commandh>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	de cf       	rjmp	.-68     	; 0x468 <_Z12CLCD_Commandh>
 4ac:	08 95       	ret

000004ae <_Z9CLCD_Datah>:
 4ae:	e5 e6       	ldi	r30, 0x65	; 101
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	95 e0       	ldi	r25, 0x05	; 5
 4b4:	90 83       	st	Z, r25
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	80 81       	ld	r24, Z
 4ba:	8b 7f       	andi	r24, 0xFB	; 251
 4bc:	80 83       	st	Z, r24
 4be:	87 ec       	ldi	r24, 0xC7	; 199
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <_Z9CLCD_Datah+0x14>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <_Z9CLCD_Datah+0x1a>
 4c8:	00 00       	nop
 4ca:	08 95       	ret

000004cc <_Z16CLCD_String_DataPh>:
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	ec 01       	movw	r28, r24
 4d2:	88 81       	ld	r24, Y
 4d4:	88 23       	and	r24, r24
 4d6:	29 f0       	breq	.+10     	; 0x4e2 <_Z16CLCD_String_DataPh+0x16>
 4d8:	21 96       	adiw	r28, 0x01	; 1
 4da:	e9 df       	rcall	.-46     	; 0x4ae <_Z9CLCD_Datah>
 4dc:	89 91       	ld	r24, Y+
 4de:	81 11       	cpse	r24, r1
 4e0:	fc cf       	rjmp	.-8      	; 0x4da <_Z16CLCD_String_DataPh+0xe>
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <_Z16ULTRA_SONIC_TRIGv>:
 //ULTRA_SONIC_TRIGGER
 // Input : None
 // Output : None
 ////////////////////////////////////////////////////////////////// 
 void ULTRA_SONIC_TRIG(){
	 sbi(PORTE, 5);		// TRIG핀 SET
 4e8:	1d 9a       	sbi	0x03, 5	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	85 e3       	ldi	r24, 0x35	; 53
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <_Z16ULTRA_SONIC_TRIGv+0x4>
 4f0:	00 00       	nop
	 _delay_us(10);
	 cbi(PORTE, 5);		// TRIG핀 CLEAR
 4f2:	1d 98       	cbi	0x03, 5	; 3
 4f4:	08 95       	ret

000004f6 <__divmodhi4>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	07 2e       	mov	r0, r23
 4fa:	16 f4       	brtc	.+4      	; 0x500 <__divmodhi4+0xa>
 4fc:	00 94       	com	r0
 4fe:	06 d0       	rcall	.+12     	; 0x50c <__divmodhi4_neg1>
 500:	77 fd       	sbrc	r23, 7
 502:	08 d0       	rcall	.+16     	; 0x514 <__divmodhi4_neg2>
 504:	36 d0       	rcall	.+108    	; 0x572 <__udivmodhi4>
 506:	07 fc       	sbrc	r0, 7
 508:	05 d0       	rcall	.+10     	; 0x514 <__divmodhi4_neg2>
 50a:	3e f4       	brtc	.+14     	; 0x51a <__divmodhi4_exit>

0000050c <__divmodhi4_neg1>:
 50c:	90 95       	com	r25
 50e:	81 95       	neg	r24
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__divmodhi4_neg2>:
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255

0000051a <__divmodhi4_exit>:
 51a:	08 95       	ret

0000051c <__divmodsi4>:
 51c:	05 2e       	mov	r0, r21
 51e:	97 fb       	bst	r25, 7
 520:	16 f4       	brtc	.+4      	; 0x526 <__divmodsi4+0xa>
 522:	00 94       	com	r0
 524:	0f d0       	rcall	.+30     	; 0x544 <__negsi2>
 526:	57 fd       	sbrc	r21, 7
 528:	05 d0       	rcall	.+10     	; 0x534 <__divmodsi4_neg2>
 52a:	37 d0       	rcall	.+110    	; 0x59a <__udivmodsi4>
 52c:	07 fc       	sbrc	r0, 7
 52e:	02 d0       	rcall	.+4      	; 0x534 <__divmodsi4_neg2>
 530:	46 f4       	brtc	.+16     	; 0x542 <__divmodsi4_exit>
 532:	08 c0       	rjmp	.+16     	; 0x544 <__negsi2>

00000534 <__divmodsi4_neg2>:
 534:	50 95       	com	r21
 536:	40 95       	com	r20
 538:	30 95       	com	r19
 53a:	21 95       	neg	r18
 53c:	3f 4f       	sbci	r19, 0xFF	; 255
 53e:	4f 4f       	sbci	r20, 0xFF	; 255
 540:	5f 4f       	sbci	r21, 0xFF	; 255

00000542 <__divmodsi4_exit>:
 542:	08 95       	ret

00000544 <__negsi2>:
 544:	90 95       	com	r25
 546:	80 95       	com	r24
 548:	70 95       	com	r23
 54a:	61 95       	neg	r22
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	8f 4f       	sbci	r24, 0xFF	; 255
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__umulhisi3>:
 554:	a2 9f       	mul	r26, r18
 556:	b0 01       	movw	r22, r0
 558:	b3 9f       	mul	r27, r19
 55a:	c0 01       	movw	r24, r0
 55c:	a3 9f       	mul	r26, r19
 55e:	70 0d       	add	r23, r0
 560:	81 1d       	adc	r24, r1
 562:	11 24       	eor	r1, r1
 564:	91 1d       	adc	r25, r1
 566:	b2 9f       	mul	r27, r18
 568:	70 0d       	add	r23, r0
 56a:	81 1d       	adc	r24, r1
 56c:	11 24       	eor	r1, r1
 56e:	91 1d       	adc	r25, r1
 570:	08 95       	ret

00000572 <__udivmodhi4>:
 572:	aa 1b       	sub	r26, r26
 574:	bb 1b       	sub	r27, r27
 576:	51 e1       	ldi	r21, 0x11	; 17
 578:	07 c0       	rjmp	.+14     	; 0x588 <__udivmodhi4_ep>

0000057a <__udivmodhi4_loop>:
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	a6 17       	cp	r26, r22
 580:	b7 07       	cpc	r27, r23
 582:	10 f0       	brcs	.+4      	; 0x588 <__udivmodhi4_ep>
 584:	a6 1b       	sub	r26, r22
 586:	b7 0b       	sbc	r27, r23

00000588 <__udivmodhi4_ep>:
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	5a 95       	dec	r21
 58e:	a9 f7       	brne	.-22     	; 0x57a <__udivmodhi4_loop>
 590:	80 95       	com	r24
 592:	90 95       	com	r25
 594:	bc 01       	movw	r22, r24
 596:	cd 01       	movw	r24, r26
 598:	08 95       	ret

0000059a <__udivmodsi4>:
 59a:	a1 e2       	ldi	r26, 0x21	; 33
 59c:	1a 2e       	mov	r1, r26
 59e:	aa 1b       	sub	r26, r26
 5a0:	bb 1b       	sub	r27, r27
 5a2:	fd 01       	movw	r30, r26
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__udivmodsi4_ep>

000005a6 <__udivmodsi4_loop>:
 5a6:	aa 1f       	adc	r26, r26
 5a8:	bb 1f       	adc	r27, r27
 5aa:	ee 1f       	adc	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	a2 17       	cp	r26, r18
 5b0:	b3 07       	cpc	r27, r19
 5b2:	e4 07       	cpc	r30, r20
 5b4:	f5 07       	cpc	r31, r21
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__udivmodsi4_ep>
 5b8:	a2 1b       	sub	r26, r18
 5ba:	b3 0b       	sbc	r27, r19
 5bc:	e4 0b       	sbc	r30, r20
 5be:	f5 0b       	sbc	r31, r21

000005c0 <__udivmodsi4_ep>:
 5c0:	66 1f       	adc	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	1a 94       	dec	r1
 5ca:	69 f7       	brne	.-38     	; 0x5a6 <__udivmodsi4_loop>
 5cc:	60 95       	com	r22
 5ce:	70 95       	com	r23
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	9b 01       	movw	r18, r22
 5d6:	ac 01       	movw	r20, r24
 5d8:	bd 01       	movw	r22, r26
 5da:	cf 01       	movw	r24, r30
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
